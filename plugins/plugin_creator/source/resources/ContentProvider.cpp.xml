<templates type="mustache">
    <template name="ContentProvider.cpp">
        <config id="ContentProvider.cpp" name="Content Provider Src">

        </config>
        <content>
            <![CDATA[
#include "{{NAME}}.h"

namespace Quartz { namespace Ext { namespace {{PLUGIN_NAMESPACE}} {

/********************** Provider ************************************/
const QString {{NAME}}::EXTENSION_ID(
    "qzp.{{PLUGIN_NAME}}.provider.content");
const QString {{NAME}}::EXTENSION_NAME(
    "Quartz {{PLUGIN_DISPLAY_NAME}} Content");

struct {{NAME}}::Data
{
    explicit Data()
    {
    }

    QVector<ContentWidget *> m_widgets;
};

{{NAME}}::{{NAME}}()
    : AbstractContentProvider(EXTENSION_ID, EXTENSION_NAME)
    , m_data(std::make_unique<Data>())
{

}

{{NAME}}::~{{NAME}}()
{

}

bool {{NAME}}::init()
{
    return true;
}

bool {{NAME}}::destroy()
{
    return true;
}

QVector<ContentWidget *> {{NAME}}::widgets()
{
    return m_data->m_widgets;
}

} } }

            ]]>
        </content>
    </template>
</templates>
